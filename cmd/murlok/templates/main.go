package main

import (
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"

	"github.com/pkg/errors"
)

func main() {
	f, err := os.Create("templates.go")
	if err != nil {
		panic(err)
	}
	defer f.Close()

	fmt.Fprintln(f, "// Code generated by go generate; DO NOT EDIT.")
	fmt.Fprintln(f, "package main")
	fmt.Fprintln(f)

	templates := []struct {
		variable string
		template string
	}{
		{
			variable: "infoPlistTmpl",
			template: filepath.Join("templates", "info.plist"),
		},
		{
			variable: "entitlementsPlistTmpl",
			template: filepath.Join("templates", "entitlements.plist"),
		},
		{
			variable: "appxManifestTmpl",
			template: filepath.Join("templates", "appxManifest.xml"),
		},
	}

	for _, t := range templates {
		if err = generate(f, t.variable, t.template); err != nil {
			fmt.Printf("generating %s failed: %s\n", t.variable, err)
		}
	}
}

func generate(w io.Writer, variable, template string) error {
	tmpl, err := ioutil.ReadFile(template)
	if err != nil {
		return errors.Wrap(err, "reading template failed")
	}

	fmt.Fprintln(w, "const", variable, "= `")
	fmt.Fprintf(w, "%s", tmpl)
	fmt.Fprintln(w, "`")
	fmt.Fprintln(w)
	return nil
}
